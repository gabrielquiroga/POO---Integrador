#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "efectorfinal.h"
#include "Conjunto.h"
#include "baserobot.h"
#include <iostream>
#include <string>
#include <sstream>
#include <windows.h>

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    ui->centralWidget->showFullScreen();
    MainWindow::makePlot1();
}

MainWindow::~MainWindow()
{
    delete ui;
}

//------------------------Art1-----------------------------

void MainWindow::on_horizontalSlider_sliderMoved(int position)
{
    ui->lcdNumber->display(position);
   string informe=base.iniciar_movimiento(0,position,base.get_vel(0));
   ui->plainTextEdit->ensureCursorVisible();
   ui->plainTextEdit->appendPlainText(QString::fromStdString(informe));
   ui->plainTextEdit->moveCursor(QTextCursor::End);
}


void MainWindow::on_dial_sliderMoved(int vel)
{
    ui->lcdNumber_2->display(vel);
    base.set_vel(0,vel);

}
//------------------------Art2-----------------------------
void MainWindow::on_horizontalSlider_2_sliderMoved(int position)
{
   ui->lcdNumber_4->display(position);
   string informe=base.iniciar_movimiento(1,position,base.get_vel(1));
   ui->plainTextEdit_2->ensureCursorVisible();
   ui->plainTextEdit_2->appendPlainText(QString::fromStdString(informe));
   ui->plainTextEdit_2->moveCursor(QTextCursor::End);
}


void MainWindow::on_dial_2_sliderMoved(int vel)
{
    ui->lcdNumber_3->display(vel);
    base.set_vel(1,vel);
}
//------------------------Art3-----------------------------


void MainWindow::on_horizontalSlider_3_sliderMoved(int position)
{
    ui->lcdNumber_6->display(position);
    string informe=base.iniciar_movimiento(2,position,base.get_vel(2));
    ui->plainTextEdit_3->ensureCursorVisible();
    ui->plainTextEdit_3->appendPlainText(QString::fromStdString(informe));
    ui->plainTextEdit_3->moveCursor(QTextCursor::End);
}

void MainWindow::on_dial_3_valueChanged(int value)
{
    ui->lcdNumber_5->display(value);
    base.set_vel(2,value);
}

//-------------------------SACAR_FOTO----------------------
void MainWindow::on_pushButton_clicked()
{
    string informeF=base.foto();
    ui->plainTextEdit_4->ensureCursorVisible();
    ui->plainTextEdit_4->appendPlainText(QString::fromStdString(informeF));
}
void MainWindow::on_spinBox_valueChanged(int N)
{
    base.setN(N);
}


//----------------------ACTIVO/INACTIVO----------------------------

void MainWindow::on_checkBox_toggled(bool checked)
{
    int posicion=0, velocidad=0;
    if (checked == 1) {
        base.set_estado("Activo");
        this->on_dial_sliderMoved(velocidad);
        ui->dial->setSliderPosition(velocidad);
        this->on_horizontalSlider_sliderMoved(posicion);
        ui->horizontalSlider->setSliderPosition(posicion);
        this->on_dial_2_sliderMoved(velocidad);
        ui->dial_2->setSliderPosition(velocidad);
        this->on_horizontalSlider_2_sliderMoved(posicion);
        ui->horizontalSlider_2->setSliderPosition(posicion);
        this->on_dial_3_valueChanged(velocidad);
        ui->dial_3->setSliderPosition(velocidad);
        this->on_horizontalSlider_3_sliderMoved(posicion);
        ui->horizontalSlider_3->setSliderPosition(posicion);
    }
    else
    {
        base.set_estado("Inactivo");
        ui->plainTextEdit->clear();
        ui->plainTextEdit_2->clear();
        ui->plainTextEdit_3->clear();
        base.borrar_historial();
    }
}



//-------------------Guardar_Acciones----------------------------

void MainWindow::on_pushButton_2_clicked()
{
    int pos1, pos2, pos3, vel1, vel2, vel3;
    pos1 = ui->horizontalSlider->sliderPosition();
    vel1 = ui->dial->sliderPosition();
    pos2 = ui->horizontalSlider_2->sliderPosition();
    vel2 = ui->dial_2->sliderPosition();
    pos3 = ui->horizontalSlider_3->sliderPosition();
    vel3 = ui->dial_3->sliderPosition();
    base.guardar_archivo(pos1, pos2, pos3, vel1, vel2, vel3);
}

//-----------------Ejecutar_Próximo_Comando------------------------------

void MainWindow::on_pushButton_3_clicked()
{
    base.leer_comando();
    int pos, vel, err=0, N, tiempo;
    unsigned i, j;
    char art;
    vector <string> datos;
    string comando, aux1, aux2, aux3, aux4;
    datos = base.get_datos();
    for (j=0;j<datos.size();j++) {
        comando = datos[j];
        for (i=0;i<comando.size();i++) {
            if (comando[i] == 'a' || comando[i] == 'A') {
                //c = comando[i+1];
                //art = (int)c;
                art = comando[i+1];
                switch (art) {
                case('0'):
                    if (comando[i+3] == 'p' || comando[i+3] == 'P') {
                        aux1 = comando.substr(i+4, 3);
                        pos = stoi(aux1);
                    }
                    else if (comando[i+3] == 'v' || comando[i+3] == 'V') {
                        aux1 = comando.substr(i+4, 3);
                        vel = stoi(aux1);
                    }
                    if (comando[i+8] == 'p' || comando[i+8] == 'P') {
                        aux2 = comando.substr(i+9, 3);
                        pos = stoi(aux2);
                    }
                    else if (comando[i+8] == 'v' || comando[i+8] == 'V') {
                        aux2 = comando.substr(i+9, 3);
                        vel = stoi(aux2);
                    }

                    this->on_dial_sliderMoved(vel);
                    ui->dial->setSliderPosition(vel);
                    this->on_horizontalSlider_sliderMoved(pos);
                    ui->horizontalSlider->setSliderPosition(pos);
                    break;
                case('1'):
                    if (comando[i+3] == 'p' || comando[i+3] == 'P') {
                        aux1 = comando.substr(i+4, 3);
                        pos = stoi(aux1);
                    }
                    else if (comando[i+3] == 'v' || comando[i+3] == 'V') {
                        aux1 = comando.substr(i+4, 3);
                        vel = stoi(aux1);
                    }
                    if (comando[i+8] == 'p' || comando[i+8] == 'P') {
                        aux2 = comando.substr(i+9, 3);
                        pos = stoi(aux2);
                    }
                    else if (comando[i+8] == 'v' || comando[i+8] == 'V') {
                        aux2 = comando.substr(i+9, 3);
                        vel = stoi(aux2);
                    }
                    this->on_dial_2_sliderMoved(vel);
                    ui->dial_2->setSliderPosition(vel);
                    this->on_horizontalSlider_2_sliderMoved(pos);
                    ui->horizontalSlider_2->setSliderPosition(pos);
                    break;
                case('2'):
                    if (comando[i+3] == 'p' || comando[i+3] == 'P') {
                        aux1 = comando.substr(i+4, 3);
                        pos = stoi(aux1);
                    }
                    else if (comando[i+3] == 'v' || comando[i+3] == 'V') {
                        aux1 = comando.substr(i+4, 3);
                        vel = stoi(aux1);
                    }
                    if (comando[i+8] == 'p' || comando[i+8] == 'P') {
                        aux2 = comando.substr(i+9, 3);
                        pos = stoi(aux2);
                    }
                    else if (comando[i+8] == 'v' || comando[i+8] == 'V') {
                        aux2 = comando.substr(i+9, 3);
                        vel = stoi(aux2);
                    }
                    this->on_dial_3_valueChanged(vel);
                    ui->dial_3->setSliderPosition(vel);
                    this->on_horizontalSlider_3_sliderMoved(pos);
                    ui->horizontalSlider_3->setSliderPosition(pos);
                    break;
                default:
                    err = 1;    //No existe tal articulación
                }
            }
            else if (comando[i] == 'f' || comando[i] == 'F') {
                aux3 = comando.substr(i+1, 3);
                N = stoi(aux3);
                base.setN(N);
                this->on_pushButton_clicked();
            }
            else if (comando[i] == 'g' || comando[i] == 'G') {
                aux4 = comando.substr(i+1, 3);
                tiempo = stoi(aux4);
                this->on_pushButton_4_clicked();
                Sleep(tiempo*1000);
                this->on_pushButton_4_clicked();
            }
        }
    }
    this->makePlot1();
}


//--------------------------VIDEO-----------------------------------------

void MainWindow::on_pushButton_4_clicked()
{
    base.set_rec(!base.get_rec());
    string informeV=base.video(base.get_rec());
    if (base.get_rec()){
        ui->pushButton_4->setStyleSheet("background-color: red");
    }else{
        ui->pushButton_4->setStyleSheet("background-color: light grey");
        ui->plainTextEdit_4->ensureCursorVisible();
        ui->plainTextEdit_4->appendPlainText(QString::fromStdString(informeV));
    }
}

//------------------------PLOTEO--------------------------------------------

void MainWindow::makePlot1(){

    QVector<double> TIME = QVector<double>::fromStdVector(base.get_TIME());
    QVector<double> VEL = QVector<double>::fromStdVector(base.get_VEL());

    ui->plot1->addGraph();
    ui->plot1->graph(0)->setData(TIME, VEL);
    // give the axes some labels:
    ui->plot1->xAxis->setLabel("tiempo");
    ui->plot1->yAxis->setLabel("posicion");
    // set axes ranges, so we see all data:
    ui->plot1->xAxis->setRange(0, 20);
    ui->plot1->yAxis->setRange(-50, 50);
    ui->plot1->replot();
}

//----------------------INGRESO_DE_COMANDOS_POR_QPLAINTEXT--------------------




void MainWindow::on_pushButton_5_toggled(bool checked)
{
    ui->plainTextEdit_5->toPlainText();
}
